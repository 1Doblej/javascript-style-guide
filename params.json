{
  "name": "Javascript-style-guide",
  "tagline": "Guía de Estilo en JavaScript",
  "body": "[# Airbnb JavaScript Style Guide() {](https://github.com/airbnb/javascript)\r\n\r\n*Un enfoque altamente razonable para JavaScript*\r\n\r\n[![Downloads](https://img.shields.io/npm/dm/eslint-config-airbnb.svg)](https://www.npmjs.com/package/eslint-config-airbnb)\r\n[![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/airbnb/javascript?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\r\n\r\nOtras Guías de Estilos\r\n- [ES5](es5/) (Obsoleto)\r\n- [React](https://github.com/airbnb/javascript/tree/master/react)\r\n- [CSS-in-JavaScript](https://github.com/airbnb/javascript/tree/master/css-in-javascript/)\r\n- [CSS & SASS](https://github.com/airbnb/css)\r\n- [Ruby](https://github.com/airbnb/ruby)\r\n\r\n## <a name='TOC'>Tabla de Contenido</a>\r\n\r\n  1. [Tipos](#types)\r\n  1. [Referencias](#references)\r\n  1. [Objetos](#objects)\r\n  1. [Arreglos](#arrays)\r\n  1. [Destructuring](#destructuring)\r\n  1. [Cadenas de Texto](#strings)\r\n  1. [Funciones](#functions)\r\n  1. [Notación de Funciones de Flecha](#arrow-functions)\r\n  1. [Clases y Constructores](#constructors)\r\n  1. [Módulos](#modules)\r\n  1. [Iteradores y Generadores](#iterators-and-generators)\r\n  1. [Propiedades](#properties)\r\n  1. [Variables](#variables)\r\n  1. [Hoisting](#hoisting)\r\n  1. [Expresiones de comparación e igualdad](#conditionals)\r\n  1. [Bloques](#blocks)\r\n  1. [Comentarios](#comments)\r\n  1. [Espacios en blanco](#whitespace)\r\n  1. [Comas](#commas)\r\n  1. [Puntos y Comas](#semicolons)\r\n  1. [Casting de Tipos & Coerción](#type-coercion)\r\n  1. [Convenciones de nomenclatura](#naming-conventions)\r\n  1. [Funciones de Acceso](#accessors)\r\n  1. [Eventos](#events)\r\n  1. [jQuery](#jquery)\r\n  1. [Compatibilidad con ES5](#es5)\r\n  1. [Estilos de ES6+ (ES2015+)](#ecmascript-6-styles)\r\n  1. [Pruebas](#testing)\r\n  1. [Desempeño](#performance)\r\n  1. [Recursos](#resources)\r\n  1. [En la cancha](#in-the-wild)\r\n  1. [Traducciones](#translation)\r\n  1. [La guía de la Guía del Estilo JavaScript](#guide-guide)\r\n  1. [Charla con nosotros sobre Javascript](#chat-with-us-about-javascript)\r\n  1. [Colaboradores](#contributors)\r\n  1. [Licencia](#license)\r\n\r\n## <a name='types'>Tipos</a>\r\n\r\n  - **Primitivos**: Cuando accedes a un tipo primitivo, manejas directamente su valor\r\n\r\n    + `string`\r\n    + `number`\r\n    + `boolean`\r\n    + `null`\r\n    + `undefined`\r\n\r\n    ```javascript\r\n    const foo = 1;\r\n    let bar = foo;\r\n\r\n    bar = 9;\r\n\r\n    console.log(foo, bar); // => 1, 9\r\n    ```\r\n  - **Complejo**: Cuando accedes a un tipo complejo, manejas la referencia a su valor.\r\n\r\n    + `object`\r\n    + `array`\r\n    + `function`\r\n\r\n    ```javascript\r\n    const foo = [1, 2];\r\n    const bar = foo;\r\n\r\n    bar[0] = 9;\r\n\r\n    console.log(foo[0], bar[0]); // => 9, 9\r\n    ```\r\n\r\n    **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n## <a name='references'>Referencias</a>\r\n  - Usa `const` para todas tus referencias; evita usar `var`.\r\n  > ¿Por qué? Esto asegura que no reasignes tus referencias, lo\r\n  que puede llevar a bugs y dificultad para comprender el código.\r\n\r\n  ```javascript\r\n  // mal\r\n  var a = 1;\r\n  var b = 2;\r\n\r\n  // bien\r\n  const a = 1;\r\n  const b = 2;\r\n  ```\r\n\r\n  - Si vas a reasignar referencias, usa `let` en vez de `var`.\r\n  > ¿Por qué? El bloque `let` es de alcance a nivel de bloque a\r\n  diferencia del alcance a nivel de función de `var`.\r\n\r\n  ```javascript\r\n  // mal\r\n  var count = 1;\r\n  if (true) {\r\n    count += 1;\r\n  }\r\n\r\n  // bien, usa el let\r\n  let count = 1;\r\n  if (true) {\r\n    count += 1;\r\n  }\r\n  ```\r\n\r\n  - Nota que tanto `let` como `const` tienen alcance a nivel de bloque.\r\n\r\n  ```javascript\r\n  // const y let solo existen en los bloques donde\r\n  // estan definidos\r\n  {\r\n    let a = 1;\r\n    const b = 1;\r\n  }\r\n  console.log(a); // ReferenceError\r\n  console.log(b); // ReferenceError\r\n  ```\r\n\r\n## <a name='objects'>Objetos</a>\r\n\r\n  - Usa la sintaxis literal para la creación de un objeto.\r\n\r\n    ```javascript\r\n    // mal\r\n    const item = new Object();\r\n\r\n    // bien\r\n    const item = {};\r\n    ```\r\n\r\n  - No uses [palabras reservadas](http://es5.github.io/#x7.6.1) para nombres de propiedades. No funciona en IE8 [Más información](https://github.com/airbnb/javascript/issues/61). No hay problema de usarlo en módulos de ES6 y en código de servidor.\r\n\r\n    ```javascript\r\n    // mal\r\n    const superman = {\r\n      default: { clark: 'kent' },\r\n      private: true\r\n    };\r\n\r\n    // bien\r\n    const superman = {\r\n      defaults: { clark: 'kent' },\r\n      hidden: true\r\n    };\r\n    ```\r\n\r\n  - Usa sinónimos legibles en lugar de palabras reservadas.\r\n\r\n    ```javascript\r\n    // mal\r\n    const superman = {\r\n      class: 'alien'\r\n    };\r\n\r\n    // mal\r\n    const superman = {\r\n      klass: 'alien'\r\n    };\r\n\r\n    // bien\r\n    const superman = {\r\n      type: 'alien'\r\n    };\r\n    ```\r\n    **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n## <a name='arrays'>Arreglos</a>\r\n\r\n  - Usa la sintaxis literal para la creación de arreglos\r\n\r\n    ```javascript\r\n    // mal\r\n    const items = new Array();\r\n\r\n    // bien\r\n    const items = [];\r\n    ```\r\n\r\n  - Usa Array#push, en vez de asignación directa, para agregar elementos a un arreglo.\r\n\r\n    ```javascript\r\n    const someStack = [];\r\n\r\n    // mal\r\n    someStack[someStack.length] = 'abracadabra';\r\n\r\n    // bien\r\n    someStack.push('abracadabra');\r\n    ```\r\n\r\n  - Usa [spread de arrays](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Operadores/Spread_operator) para copiar arreglos.\r\n\r\n    ```javascript\r\n    const len = items.length;\r\n    const itemsCopy = [];\r\n    let i;\r\n\r\n    // mal\r\n    for (i = 0; i < len; i++) {\r\n      itemsCopy[i] = items[i];\r\n    }\r\n\r\n    // bien\r\n    const itemsCopy = [...items];\r\n    ```\r\n\r\n  - Para convertir un objeto [\"array-like\" (similar a un arreglo)](https://www.inkling.com/read/javascript-definitive-guide-david-flanagan-6th/chapter-7/array-like-objects) a un arreglo, usa Array#from.\r\n\r\n    ```javascript\r\n    const foo = document.querySelectorAll('.foo');\r\n    const nodes = Array.from(foo);\r\n    ```\r\n\r\n    **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n\r\n## <a name='strings'>Cadenas de Texto</a>\r\n\r\n  - Usa comillas simples `''` para las cadenas de texto\r\n\r\n    ```javascript\r\n    // mal\r\n    const name = \"Bob Parr\";\r\n\r\n    // bien\r\n    const name = 'Bob Parr';\r\n    ```\r\n\r\n  - Las cadenas de texto con una longitud mayor a 100 caracteres deben ser escritas en múltiples líneas usando concatenación.\r\n\r\n  > **Nota:** Cuando se usa sin criterio, las cadenas de texto largas pueden impactar en el desempeño. [jsPerf](http://jsperf.com/ya-string-concat) & [Discusión](https://github.com/airbnb/javascript/issues/40)\r\n\r\n    ```javascript\r\n    // mal\r\n    var errorMessage = 'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.';\r\n\r\n    // bien\r\n    var errorMessage = 'This is a super long error that was thrown because\\\r\n    of Batman. When you stop to think about how Batman had anything to do \\\r\n    with this, you would get nowhere fast.';\r\n\r\n    // bien\r\n    var errorMessage = 'This is a super long error that was thrown because' +\r\n      'of Batman. When you stop to think about how Batman had anything to do ' +\r\n      'with this, you would get nowhere fast.';\r\n    ```\r\n\r\n  - Cuando se crean cadenas de texto de forma programática, usa template strings (cadena de plantillas) en vez de concatenación.\r\n\r\n  > ¿Por qué? Los template strings te dan mayor legibilidad, sintaxis concisa con nuevas líneas apropiadas y capacidades de interpolación.\r\n\r\n    ```javascript\r\n    // mal\r\n    function sayHi(name) {\r\n      return 'How are you, ' + name + '?';\r\n    }\r\n\r\n    // mal\r\n    function sayHi(name) {\r\n      return ['How are you, ', name, '?'].join();\r\n    }\r\n\r\n    // bien\r\n    function sayHi(name) {\r\n      return `How are you, ${name}?`;\r\n    }\r\n    ```\r\n\r\n  - Nunca uses `eval()` en una cadena de texto, abre una caja de Pandora de vulnerabilidades.\r\n\r\n    **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n\r\n## <a name='functions'>Funciones</a>\r\n\r\n  - Usa declaración de función en vez de expresiones de función.\r\n\r\n  > ¿Por qué? Las declaraciones de función son nombradas, por lo que son más sencillos de identificar en las pilas de llamadas. Además todo el contenido de una declaración de función es *hoisted*, mientras que solo la referencia de una expresión de función es *hoisted*. Esta regla hace posible que siempre se usen [Arrow Functions](#arrow-functions) en vez de las funciones de expresión.\r\n\r\n  ```javascript\r\n   // mal\r\n   const foo = function () {\r\n   };\r\n\r\n   // bien\r\n   function foo() {\r\n   }\r\n   ```\r\n\r\n  - Nunca declares una función en un bloque que no sea de función (if, while, etc). En vez de ello, asigna la función a una variable. Los navegadores te permitirán hacerlo pero todos ellos lo interpretarán de modo diferente, lo que es lamentable.\r\n\r\n  > **Nota:** ECMA-262 define un bloque como una lista de sentencias. Una declaración de función no es una sentencia. [Lee la nota de ECMA-262 sobre este inconveniente](http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf#page=97).\r\n\r\n    ```javascript\r\n    // mal\r\n    if (currentUser) {\r\n      function test() {\r\n        console.log('Nope.');\r\n      }\r\n    }\r\n\r\n    // bien\r\n    let test;\r\n    if (currentUser) {\r\n      test = () => {\r\n        console.log('Yup.');\r\n      };\r\n    }\r\n    ```\r\n\r\n  - Nunca nombres a un parámetro como `arguments`, esto tendrá precedencia sobre el objeto `arguments` que es brindado en cada ámbito de función.\r\n\r\n    ```javascript\r\n    // mal\r\n    function nope(name, options, arguments) {\r\n      // ...algo...\r\n    }\r\n\r\n    // bien\r\n    function yup(name, options, args) {\r\n      // ...algo...\r\n    }\r\n    ```\r\n\r\n    **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n## <a name='constructors'>Clases y Constructores</a>\r\n\r\n  - Siempre usa `class`. Evita manipular `prototype` directamente.\r\n\r\n    > ¿Por qué? La sintaxis `class` es más concisa y fácil con la cual lidiar.\r\n\r\n    ```javascript\r\n    // mal\r\n    function Queue(contents = []) {\r\n      this._queue = [...contents];\r\n    }\r\n    Queue.prototype.pop = function () {\r\n      const value = this._queue[0];\r\n      this._queue.splice(0, 1);\r\n      return value;\r\n    }\r\n\r\n    // bien\r\n    class Queue {\r\n      constructor(contents = []) {\r\n        this._queue = [...contents];\r\n      }\r\n      pop() {\r\n        const value = this._queue[0];\r\n        this._queue.splice(0, 1);\r\n        return value;\r\n      }\r\n    }\r\n    ```\r\n\r\n  - Métodos pueden retornar `this` para ayudar con el encadenamiento de métodos (*chaining*).\r\n\r\n  ```javascript\r\n    // mal\r\n    Jedi.prototype.jump = function () {\r\n      this.jumping = true;\r\n      return true;\r\n    };\r\n\r\n    Jedi.prototype.setHeight = function (height) {\r\n      this.height = height;\r\n    };\r\n\r\n    const luke = new Jedi();\r\n    luke.jump(); // => true\r\n    luke.setHeight(20); // => undefined\r\n\r\n    // bien\r\n    class Jedi {\r\n      jump() {\r\n        this.jumping = true;\r\n        return this;\r\n      }\r\n\r\n      setHeight(height) {\r\n        this.height = height;\r\n        return this;\r\n      }\r\n    }\r\n\r\n    const luke = new Jedi();\r\n\r\n    luke.jump()\r\n      .setHeight(20);\r\n    ```\r\n\r\n  - Está bien escribir un método `toString()` personalizado, solo asegúrate que funcione correctamente y no cause efectos colaterales.\r\n\r\n    ```javascript\r\n    class Jedi {\r\n      constructor(options = {}) {\r\n        this.name = options.name || 'no name';\r\n      }\r\n\r\n      getName() {\r\n        return this.name;\r\n      }\r\n\r\n      toString() {\r\n        return `Jedi - ${this.getName()}`;\r\n      }\r\n    }\r\n    ```\r\n\r\n    **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n\r\n## <a name='properties'>Propiedades</a>\r\n\r\n  - Usa la notación de punto `.` cuando accedas a las propiedades.\r\n\r\n    ```javascript\r\n    const luke = {\r\n      jedi: true,\r\n      age: 28\r\n    };\r\n\r\n    // mal\r\n    const isJedi = luke['jedi'];\r\n\r\n    // bien\r\n    const isJedi = luke.jedi;\r\n    ```\r\n\r\n  - Usa la notación subscript `[]` cuando accedas a las propiedades con una variable.\r\n\r\n    ```javascript\r\n    const luke = {\r\n      jedi: true,\r\n      age: 28\r\n    };\r\n\r\n    function getProp(prop) {\r\n      return luke[prop];\r\n    }\r\n\r\n    const isJedi = getProp('jedi');\r\n    ```\r\n\r\n    **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n\r\n## <a name='variables'>Variables</a>\r\n\r\n  - Siempre usa `const` para declarar constantes o `let` para declarar variables. No hacerlo resultará en variables globales. Debemos evitar contaminar el espacio global (global namespace). El [Capitán Planeta](https://es.wikipedia.org/wiki/Capit%C3%A1n_Planeta_y_los_planetarios) nos advirtió de eso.\r\n\r\n    ```javascript\r\n    // mal\r\n    superPower = new SuperPower();\r\n\r\n    // bien\r\n    const superPower = new SuperPower();\r\n\r\n    o\r\n\r\n    // bien\r\n    let aPower;\r\n    aPower = new SuperPower(); // esto puede cambiar a otro poder posteriormente\r\n    ```\r\n\r\n  - Usa una declaración `const` o `let` por variable.\r\n\r\n    > ¿Por qué? Es más fácil agregar nuevas declaraciones de variables de este modo, y no tendrás que preocuparte por reemplazar `;` por `,` o introducir diffs de sólo puntuación .\r\n\r\n    ```javascript\r\n    // mal\r\n    const items = getItems(),\r\n        goSportsTeam = true,\r\n        dragonball = 'z';\r\n\r\n    // mal\r\n    // (compara con lo de arriba y encuentra el error)\r\n    const items = getItems(),\r\n        goSportsTeam = true;\r\n        dragonball = 'z';\r\n\r\n    // bien\r\n    const items = getItems();\r\n    const goSportsTeam = true;\r\n    const dragonball = 'z';\r\n    ```\r\n\r\n  - Agrupa tus `const`s y luego agrupa tus `let`s.\r\n    > ¿Por qué? Esto es útil cuando necesites asignar una variable luego dependiendo de una de las variables asignadas previamente.\r\n\r\n    ```javascript\r\n   // mal\r\n   let i, len, dragonball,\r\n       items = getItems(),\r\n       goSportsTeam = true;\r\n\r\n   // mal\r\n   let i;\r\n   const items = getItems();\r\n   let dragonball;\r\n   const goSportsTeam = true;\r\n   let len;\r\n\r\n   // bien\r\n   const goSportsTeam = true;\r\n   const items = getItems();\r\n   let dragonball;\r\n   let i;\r\n   let length;\r\n   ```\r\n\r\n  - Asigna las variables cuando las necesites, pero ponlas en un lugar razonable.\r\n    > ¿Por qué? `let` y `const` están a nivel de bloque, no a  nivel de función.\r\n\r\n    ```javascript\r\n   // mal - llamada a funcion innecesaria\r\n   function checkName(hasName) {\r\n     const name = getName();\r\n\r\n     if (hasName === 'test') {\r\n       return false;\r\n     }\r\n\r\n     if (name === 'test') {\r\n       this.setName('');\r\n       return false;\r\n     }\r\n\r\n     return name;\r\n   }\r\n\r\n   // bien\r\n   function checkName(hasName) {\r\n     if (hasName === 'test') {\r\n       return false;\r\n     }\r\n\r\n     const name = getName();\r\n\r\n     if (name === 'test') {\r\n       this.setName('');\r\n       return false;\r\n     }\r\n\r\n     return name;\r\n   }\r\n   ```\r\n\r\n    **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n\r\n## <a name='hoisting'>Hoisting</a>\r\n\r\n  - Las declaraciones de variables son movidas a la parte superior de su ámbito, sin embargo su asignación no.\r\n\r\n    ```javascript\r\n    // sabemos que esto no funcionara (asumiendo\r\n    // que no hay una variable global notDefined)\r\n    function example() {\r\n      console.log(notDefined); // => lanza un ReferenceError\r\n    }\r\n\r\n    // crear una declaracion de variable luego\r\n    // que referencies a la variable funcionara\r\n    // por el hoisting. Nota: A la asignacion\r\n    // del valor `true` no se le aplico hoisting.\r\n    function example() {\r\n      console.log(declaredButNotAssigned); // => undefined\r\n      var declaredButNotAssigned = true;\r\n    }\r\n\r\n    // El interprete lleva la declaracion de la\r\n    // variable a la parte superior de la funcion.\r\n    // Eso significa que nuestro ejemplo\r\n    // podria ser reescrito como:\r\n    function example() {\r\n      var declaredButNotAssigned;\r\n      console.log(declaredButNotAssigned); // => undefined\r\n      declaredButNotAssigned = true;\r\n    }\r\n    ```\r\n\r\n  - Expresiones de función anónimas hacen hoisting de su nombre de variable, pero no de la asignación de la función.\r\n\r\n    ```javascript\r\n    function example() {\r\n      console.log(anonymous); // => undefined\r\n\r\n      anonymous(); // => TypeError anonymous is not a function\r\n\r\n      var anonymous = function() {\r\n        console.log('anonymous function expression');\r\n      };\r\n    }\r\n    ```\r\n\r\n  - Expresiones de función nombradas hacen hoisting de su nombre de variable, pero no del nombre de la función ni del contenido de la función.\r\n\r\n    ```javascript\r\n    function example() {\r\n      console.log(named); // => undefined\r\n\r\n      named(); // => TypeError named is not a function\r\n\r\n      superPower(); // => ReferenceError superPower is not defined\r\n\r\n      var named = function superPower() {\r\n        console.log('Flying');\r\n      };\r\n    }\r\n\r\n    // lo mismo es cierto cuando el nombre\r\n    // de la funcion es igual al nombre de\r\n    // la variable.\r\n    function example() {\r\n      console.log(named); // => undefined\r\n\r\n      named(); // => TypeError named is not a function\r\n\r\n      var named = function named() {\r\n        console.log('named');\r\n      }\r\n    }\r\n    ```\r\n\r\n  - Las declaraciones de función hacen hoist de su nombre y del contenido de la función.\r\n\r\n    ```javascript\r\n    function example() {\r\n      superPower(); // => Flying\r\n\r\n      function superPower() {\r\n        console.log('Flying');\r\n      }\r\n    }\r\n    ```\r\n\r\n  - Para más información lee [JavaScript Scoping & Hoisting](http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting) por [Ben Cherry](http://www.adequatelygood.com/)\r\n\r\n    **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n\r\n\r\n## <a name='conditionals'>Expresiones de comparación e igualdad</a>\r\n\r\n  - Usa `===` y `!==` en vez de `==` y `!=` respectivamente.\r\n  - Las expresiones condicionales son evaluadas usando coerción con el método `ToBoolean` y siempre obedecen a estas reglas sencillas:\r\n\r\n    + **Objects** son evaluados como **true** (se considera así al objeto vacío `{}` y arreglos sin contenido `[]`)\r\n    + **Undefined** es evaluado como **false**\r\n    + **Null** es evaluado como **false**\r\n    + **Booleans** son evaluados como **el valor del booleano**\r\n    + **Numbers** son evaluados como **false** si su valor es **+0**, **-0**, o **NaN**, de otro modo **true**\r\n    + **Strings** son evaluados como **false** si es una cadena de texto vacía `''`, de otro modo son **true**\r\n\r\n    ```javascript\r\n    if ([0] && []) {\r\n      // true\r\n      // un arreglo es un objeto (incluso uno vacío), los objetos son evaluados como true\r\n    }\r\n    ```\r\n\r\n  - Usa atajos.\r\n\r\n    ```javascript\r\n    // mal\r\n    if (name !== '') {\r\n      // ...cosas...\r\n    }\r\n\r\n    // bien\r\n    if (name) {\r\n      // ...cosas...\r\n    }\r\n\r\n    // mal\r\n    if (collection.length > 0) {\r\n      // ...cosas...\r\n    }\r\n\r\n    // bien\r\n    if (collection.length) {\r\n      // ...cosas...\r\n    }\r\n    ```\r\n\r\n  - Para más información revisa [Truth Equality and JavaScript](http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108) por Angus Croll\r\n\r\n  - Usa llaves para crear bloques en cláusulas `case` y `default` que contengan\r\n  declaraciones léxicas (e.g. `let`, `const`, `function` y `class`).\r\n\r\n    > ¿Por qué? La declaración léxica es visible en todo el bloque `switch`\r\n    pero solo se inicializa al ser asignado, lo que solo ocurre cuando el bloque\r\n    `case` donde es declarado es alcanzado. Esto causa problemas cuando\r\n    múltiples bloques `case` intentan definir la misma variable.\r\n\r\n\r\n    ```javascript\r\n    // mal\r\n    switch (foo) {\r\n      case 1:\r\n        let x = 1;\r\n        break;\r\n      case 2:\r\n        const y = 2;\r\n        break;\r\n      case 3:\r\n        function f() {}\r\n        break;\r\n      default:\r\n        class C {}\r\n    }\r\n\r\n    // bien\r\n    switch (foo) {\r\n      case 1: {\r\n        let x = 1;\r\n        break;\r\n      }\r\n      case 2: {\r\n        const y = 2;\r\n        break;\r\n      }\r\n      case 3: {\r\n        function f() {}\r\n        break;\r\n      }\r\n      case 4:\r\n        bar();\r\n        break;\r\n      default: {\r\n        class C {}\r\n      }\r\n    }\r\n    ```\r\n\r\n    **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n\r\n## <a name='blocks'>Bloques</a>\r\n\r\n  - Usa llaves con todos los bloques de múltiples líneas.\r\n\r\n    ```javascript\r\n    // mal\r\n    if (test)\r\n      return false;\r\n\r\n    // bien\r\n    if (test) return false;\r\n\r\n    // bien\r\n    if (test) {\r\n      return false;\r\n    }\r\n\r\n    // mal\r\n    function() { return false; }\r\n\r\n    // bien\r\n    function() {\r\n      return false;\r\n    }\r\n    ```\r\n\r\n  - Si estás usando bloques de muchas líneas con ```if``` y ```else```, pon el ```else``` en la misma línea que el ```if```.\r\n\r\n    ```javascript\r\n    // mal\r\n    if (test) {\r\n      thing1();\r\n      thing2();\r\n    }\r\n    else {\r\n      thing3();\r\n    }\r\n\r\n    // bien\r\n    if (test) {\r\n      thing1();\r\n      thing2();\r\n    } else {\r\n      thing3();\r\n    }\r\n    ```\r\n\r\n    **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n\r\n## <a name='comments'>Comentarios</a>\r\n\r\n  - Usa `/** ... */` para comentarios de múltiples líneas. Incluye una descripción, especificación de tipos y valores para todos los parámetros y valores de retorno.\r\n\r\n    ```javascript\r\n    // mal\r\n    // make() returns a new element\r\n    // based on the passed in tag name\r\n    //\r\n    // @param {String} tag\r\n    // @return {Element} element\r\n    function make(tag) {\r\n\r\n      // ...stuff...\r\n\r\n      return element;\r\n    }\r\n\r\n    // bien\r\n    /**\r\n     * make() returns a new element\r\n     * based on the passed in tag name\r\n     *\r\n     * @param {String} tag\r\n     * @return {Element} element\r\n     */\r\n    function make(tag) {\r\n\r\n      // ...stuff...\r\n\r\n      return element;\r\n    }\r\n    ```\r\n\r\n  - Usa `//` para comentarios de una sola línea. Ubica los comentarios de una sola línea encima de la sentencia comentada. Deja una línea en blanco antes del comentario, a menos que sea la primera línea de un bloque.\r\n\r\n    ```javascript\r\n    // mal\r\n    const active = true;  // is current tab\r\n\r\n    // bien\r\n    // is current tab\r\n    const active = true;\r\n\r\n    // mal\r\n    function getType() {\r\n      console.log('fetching type...');\r\n      // set the default type to 'no type'\r\n      const type = this._type || 'no type';\r\n\r\n      return type;\r\n    }\r\n\r\n    // bien\r\n    function getType() {\r\n      console.log('fetching type...');\r\n\r\n      // set the default type to 'no type'\r\n      const type = this._type || 'no type';\r\n\r\n      return type;\r\n    }\r\n    ```\r\n\r\n  - Agregando a tus comentarios los prefijos `FIXME` o `TODO`, ayudará a otros desarrolladores a entender rápidamente si estás apuntando a un problema que precisa ser revisado o si estás sugiriendo una solución al problema que debería ser implementado. Estos son diferentes a comentarios regulares en el sentido que requieren alguna acción. Las acciones son `FIXME -- necesito resolver esto` o `TODO -- necesita implementarse`.\r\n\r\n  - Usa `// FIXME:` para anotar problemas.\r\n\r\n    ```javascript\r\n    class Calculator extends Abacus {\r\n      constructor() {\r\n        super();\r\n\r\n        // FIXME: shouldn't use a global here\r\n        total = 0;\r\n      }\r\n    }\r\n    ```\r\n\r\n  - Usa `// TODO:` para anotar soluciones a los problemas.\r\n\r\n    ```javascript\r\n    class Calculator extends Abacus {\r\n      constructor() {\r\n        super();\r\n\r\n        // TODO: total should be configurable by an options param\r\n        this.total = 0;\r\n      }\r\n    }\r\n    ```\r\n\r\n    **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n\r\n## <a name='whitespace'>Espacios en blanco</a>\r\n\r\n  - Usa indentaciones blandas (sin TAB)  establecidas en dos espacios.\r\n\r\n    ```javascript\r\n    // mal\r\n    function foo() {\r\n    ∙∙∙∙const name;\r\n    }\r\n\r\n    // mal\r\n    function bar() {\r\n    ∙const name;\r\n    }\r\n\r\n    // bien\r\n    function baz() {\r\n    ∙∙const name;\r\n    }\r\n    ```\r\n  - Deja un espacio antes de la llave de apertura.\r\n\r\n    ```javascript\r\n    // mal\r\n    function test(){\r\n      console.log('test');\r\n    }\r\n\r\n    // bien\r\n    function test() {\r\n      console.log('test');\r\n    }\r\n\r\n    // mal\r\n    dog.set('attr',{\r\n      age: '1 year',\r\n      breed: 'Bernese Mountain Dog'\r\n    });\r\n\r\n    // bien\r\n    dog.set('attr', {\r\n      age: '1 year',\r\n      breed: 'Bernese Mountain Dog'\r\n    });\r\n    ```\r\n\r\n  - Deja un espacio antes del paréntesis de apertura en las sentencias de control (```if```, ```while```, etc.). No dejes espacios antes de la lista de argumentos en las invocaciones y declaraciones de funciones.\r\n    ```javascript\r\n    // mal\r\n    if(isJedi) {\r\n      fight ();\r\n    }\r\n\r\n    // bien\r\n    if (isJedi) {\r\n      fight();\r\n    }\r\n\r\n    // mal\r\n    function fight () {\r\n      console.log ('Swooosh!');\r\n    }\r\n\r\n    // bien\r\n    function fight() {\r\n      console.log('Swooosh!');\r\n    }\r\n    ```\r\n\r\n  - Separa a los operadores con espacios.\r\n    ```javascript\r\n    // mal\r\n    const x=y+5;\r\n\r\n    // bien\r\n    const x = y + 5;\r\n    ```\r\n\r\n  - Deja una línea en blanco al final del archivo.\r\n\r\n    ```javascript\r\n    // mal\r\n    (function(global) {\r\n      // ...algo...\r\n    })(this);\r\n    ```\r\n\r\n    ```javascript\r\n    // mal\r\n    (function(global) {\r\n      // ...algo...\r\n    })(this);↵\r\n    ↵\r\n\r\n    ```\r\n\r\n    ```javascript\r\n    // bien\r\n    (function(global) {\r\n      // ...algo...\r\n    })(this);↵\r\n\r\n    ```\r\n\r\n  - Usa indentación cuando uses métodos largos con 'chaining' (más de dos métodos encadenados). Emplea un punto adelante en cada nueva línea, lo que enfatiza que es un método llamado no una nueva sentencia.\r\n\r\n    ```javascript\r\n    // mal\r\n    $('#items').find('.selected').highlight().end().find('.open').updateCount();\r\n\r\n    // mal\r\n    $('#items').\r\n      find('.selected').\r\n        highlight().\r\n        end().\r\n      find('.open').\r\n        updateCount();\r\n\r\n    // bien\r\n    $('#items')\r\n      .find('.selected')\r\n        .highlight()\r\n        .end()\r\n      .find('.open')\r\n        .updateCount();\r\n\r\n    // mal\r\n    const leds = stage.selectAll('.led').data(data).enter().append('svg:svg').class('led', true)\r\n        .attr('width',  (radius + margin) * 2).append('svg:g')\r\n        .attr('transform', 'translate(' + (radius + margin) + ',' + (radius + margin) + ')')\r\n        .call(tron.led);\r\n\r\n    // bien\r\n    const leds = stage.selectAll('.led')\r\n        .data(data)\r\n      .enter().append('svg:svg')\r\n        .class('led', true)\r\n        .attr('width',  (radius + margin) * 2)\r\n      .append('svg:g')\r\n        .attr('transform', 'translate(' + (radius + margin) + ',' + (radius + margin) + ')')\r\n        .call(tron.led);\r\n    ```\r\n\r\n  - Deja una línea en blanco luego de los bloques y antes de la siguiente sentencia.\r\n\r\n    ```javascript\r\n    // mal\r\n    if (foo) {\r\n      return bar;\r\n    }\r\n    return baz;\r\n\r\n    // bien\r\n    if (foo) {\r\n      return bar;\r\n    }\r\n\r\n    return baz;\r\n\r\n    // mal\r\n    const obj = {\r\n      foo() {\r\n      },\r\n      bar() {\r\n      }\r\n    };\r\n    return obj;\r\n\r\n    // bien\r\n    const obj = {\r\n      foo() {\r\n      },\r\n\r\n      bar() {\r\n      }\r\n    };\r\n\r\n    return obj;\r\n\r\n    // mal\r\n    const arr = [\r\n      function foo() {\r\n      },\r\n      function bar() {\r\n      },\r\n    ];\r\n    return arr;\r\n\r\n    // bien\r\n    const arr = [\r\n      function foo() {\r\n      },\r\n\r\n      function bar() {\r\n      },\r\n    ];\r\n\r\n    return arr;\r\n    ```\r\n\r\n    **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n## <a name='commas'>Comas</a>\r\n\r\n  - Comas al inicio de línea: **Nop.**\r\n\r\n    ```javascript\r\n    // mal\r\n    const story = [\r\n        once\r\n      , upon\r\n      , aTime\r\n    ];\r\n\r\n    // bien\r\n    const story = [\r\n      once,\r\n      upon,\r\n      aTime,\r\n    ];\r\n\r\n    // mal\r\n    const hero = {\r\n        firstName: 'Ada'\r\n      , lastName: 'Lovelace'\r\n      , birthYear: 1815\r\n      , superPower: 'strength'\r\n    };\r\n\r\n    // bien\r\n    const hero = {\r\n      firstName: 'Ada',\r\n      lastName: 'Lovelace',\r\n      birthYear: 1815,\r\n      superPower: 'computers',\r\n    };\r\n    ```\r\n\r\n  - Coma adicional al final: **Sip.**\r\n  > ¿Por qué? Esto lleva a diferenciales en git más claros. Además los transpiladores como Babel removerán la coma del final en el código transpilado lo que significa que no te tendrás que preocupar del [problema de la coma adicional al final](es5/README.md#commas) en navegadores antiguos.\r\n\r\n    ```javascript\r\n    // mal - git diff sin coma adicional al final\r\n    const hero = {\r\n         firstName: 'Florence',\r\n    -    lastName: 'Nightingale'\r\n    +    lastName: 'Nightingale',\r\n    +    inventorOf: ['coxcomb chart', 'modern nursing']\r\n    };\r\n\r\n    // bien - git diff con coma adicional al final\r\n    const hero = {\r\n         firstName: 'Florence',\r\n         lastName: 'Nightingale',\r\n    +    inventorOf: ['coxcomb chart', 'modern nursing'],\r\n    };\r\n\r\n    // mal\r\n    const hero = {\r\n      firstName: 'Dana',\r\n      lastName: 'Scully'\r\n    };\r\n\r\n    const heroes = [\r\n      'Batman',\r\n      'Superman'\r\n    ];\r\n\r\n    // bien\r\n    const hero = {\r\n      firstName: 'Dana',\r\n      lastName: 'Scully',\r\n    };\r\n\r\n    const heroes = [\r\n      'Batman',\r\n      'Superman',\r\n    ];\r\n    ```\r\n\r\n    **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n\r\n## <a name='semicolons'>Puntos y Comas</a>\r\n\r\n  - **Sip.**\r\n\r\n    ```javascript\r\n    // mal\r\n    (function () {\r\n      const name = 'Skywalker'\r\n      return name\r\n    })()\r\n\r\n    // bien\r\n    (() => {\r\n      const name = 'Skywalker';\r\n      return name;\r\n    }());\r\n\r\n    // bien, pero arcaico (evita que la funcion se vuelva un argumento\r\n    // cuando dos archivos con IIFEs sean concatenados)\r\n    ;(() => {\r\n      const name = 'Skywalker';\r\n      return name;\r\n    }());\r\n    ```\r\n\r\n    **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n\r\n## <a name='type-coercion'>Casting de Tipos & Coerción</a>\r\n\r\n  - Ejecuta coerción al inicio de una sentencia.\r\n  - Strings:\r\n\r\n    ```javascript\r\n    //  => this.reviewScore = 9;\r\n\r\n    // mal\r\n    const totalScore = this.reviewScore + ''; // invoca a this.reviewScore.valueOf()\r\n\r\n    // mal\r\n    const totalScore = this.reviewScore.toString(); // no se garantiza que retorne una cadena de texto\r\n\r\n    // bien\r\n    const totalScore = String(this.reviewScore);\r\n    ```\r\n\r\n  - Números: Usa `Number` para el casting de tipo y `parseInt` siempre con la base numérica para el casting de textos.\r\n\r\n    ```javascript\r\n    const inputValue = '4';\r\n\r\n    // mal\r\n    const val = new Number(inputValue);\r\n\r\n    // mal\r\n    const val = +inputValue;\r\n\r\n    // mal\r\n    const val = inputValue >> 0;\r\n\r\n    // mal\r\n    const val = parseInt(inputValue);\r\n\r\n    // bien\r\n    const val = Number(inputValue);\r\n\r\n    // bien\r\n    const val = parseInt(inputValue, 10);\r\n    ```\r\n\r\n  - Si por alguna razón estás haciendo algo salvaje y `parseInt` es un cuello de botella por lo que necesitaste usar Bitshift por [razones de desempeño](http://jsperf.com/coercion-vs-casting/3), deja un comentario explicando la razón y resumen de lo que estás haciendo.\r\n\r\n    ```javascript\r\n    // bien\r\n    /**\r\n     * parseInt was the reason my code was slow.\r\n     * Bitshifting the String to coerce it to a\r\n     * Number made it a lot faster.\r\n     */\r\n    const val = inputValue >> 0;\r\n    ```\r\n\r\n  > **Nota:** Ten mucho cuidado al hacer operaciones de Bitshift. En Javascript los números son representados como [valores de 64-bit](http://es5.github.io/#x4.3.19), sin embargo las operaciones de Bitshift siempre retornan un entero de 32-bits ([fuente](http://es5.github.io/#x11.7)). Bitshift puede presentarnos un comportamiento inesperado para valores enteros mayores a 32 bits. [Discusión](https://github.com/airbnb/javascript/issues/109). El mayor entero con signo de 32 bits es 2,147,483,647:\r\n  ```javascript\r\n  2147483647 >> 0 //=> 2147483647\r\n  2147483648 >> 0 //=> -2147483648\r\n  2147483649 >> 0 //=> -2147483647\r\n  ```\r\n\r\n  - Booleans:\r\n\r\n    ```javascript\r\n    const age = 0;\r\n\r\n    // mal\r\n    const hasAge = new Boolean(age);\r\n\r\n    // bien\r\n    const hasAge = Boolean(age);\r\n\r\n    // bien\r\n    const hasAge = !!age;\r\n    ```\r\n\r\n    **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n\r\n## <a name='naming-conventions'>Convenciones de nomenclatura</a>\r\n\r\n  - Evita nombres de una sola letra. Sé descriptivo con tus nombres.\r\n\r\n    ```javascript\r\n    // mal\r\n    function q() {\r\n      // ...algo...\r\n    }\r\n\r\n    // bien\r\n    function query() {\r\n      // ...algo...\r\n    }\r\n    ```\r\n\r\n  - Usa camelCase cuando nombres tus objetos, funciones e instancias.\r\n\r\n    ```javascript\r\n    // mal\r\n    const OBJEcttsssss = {};\r\n    const this_is_my_object = {};\r\n    const o = {};\r\n    function c() {}\r\n\r\n    // bien\r\n    var thisIsMyObject = {};\r\n    function thisIsMyFunction() {}\r\n    ```\r\n\r\n  - Usa PascalCase cuando nombres constructores o clases.\r\n\r\n    ```javascript\r\n    // mal\r\n    function user(options) {\r\n      this.name = options.name;\r\n    }\r\n\r\n    const bad = new user({\r\n      name: 'nope'\r\n    });\r\n\r\n    // bien\r\n    class User {\r\n      constructor(options) {\r\n        this.name = options.name;\r\n      }\r\n    }\r\n\r\n    const good = new User({\r\n      name: 'yup',\r\n    });\r\n    ```\r\n\r\n  - No uses prefijos ni sufijos de guiones bajo.\r\n  > ¿Por qué? JavaScript no tiene el concepto de privacidad en términos de propiedades o métodos. A pesar que un guión bajo como prefijo es una convención común para indicar que son \"privados\", la realidad es que estas propiedades son absolutamente públicas, y por ello, parte de tu contrato público de API. La convención del prefijo de guión bajo podría orientar a los desarrolladores a pensar erróneamente que un cambio a aquellos no será de impacto o que los tests no son necesarios.\r\n\r\n    ```javascript\r\n    // mal\r\n    this.__firstName__ = 'Panda';\r\n    this.firstName_ = 'Panda';\r\n    this._firstName = 'Panda';\r\n\r\n\r\n    // bien\r\n    this.firstName = 'Panda';\r\n    ```\r\n\r\n  - Nunca guardes referencias a `this`. Usa funciones arrow o la función [#bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)\r\n\r\n    ```javascript\r\n    // mal\r\n    function() {\r\n      const self = this;\r\n      return function() {\r\n        console.log(self);\r\n      };\r\n    }\r\n\r\n    // mal\r\n    function() {\r\n      const that = this;\r\n      return function() {\r\n        console.log(that);\r\n      };\r\n    }\r\n\r\n    // bien\r\n    function foo() {\r\n      return () => {\r\n        console.log(this);\r\n      };\r\n    }\r\n    ```\r\n\r\n  - El nombre del archivo base debe corresponder exactamente con el nombre de su export por defecto.\r\n\r\n  ```javascript\r\n   // contenido archivo 1\r\n   class CheckBox {\r\n     // ...\r\n   }\r\n   export default CheckBox;\r\n\r\n   // contenido archivo 2\r\n   export default function fortyTwo() { return 42; }\r\n\r\n   // contenido archivo 3\r\n   export default function insideDirectory() {}\r\n\r\n   // en algún otro archivo\r\n   // mal\r\n   import CheckBox from './checkBox'; // importacion/exportacion PascalCase, nombre de archivo camelCase\r\n   import FortyTwo from './FortyTwo'; // importacion/nombre de archivo PascalCase, exportacion camelCase\r\n   import InsideDirectory from './InsideDirectory'; // importacion/nombre de archivo PascalCase, exportacion camelCase\r\n\r\n   // mal\r\n   import CheckBox from './check_box'; // importacion/exportacion PascalCase, nombre de archivo snake_case\r\n   import forty_two from './forty_two'; // importacion/nombre de archivo snake_case, exportacion camelCase\r\n   import inside_directory from './inside_directory'; // importacion snake_case, exportacion camelCase\r\n   import index from './inside_directory/index'; // requiere el archivo de index explicitamente\r\n   import insideDirectory from './insideDirectory/index'; // requiere el archivo de index explicitamente\r\n\r\n   // bien\r\n   import CheckBox from './CheckBox'; // importacion/exportacion/nombre de archivo PascalCase\r\n   import fortyTwo from './fortyTwo'; // importacion/exportacion/nombre de archivo camelCase\r\n   import insideDirectory from './insideDirectory'; // importacion/exportacion/nombre directorio/archivo \"index\" implícito\r\n   // ^ soporta tanto insideDirectory.js e insideDirectory/index.js\r\n\r\n   ```\r\n\r\n  - Usa camelCase cuando exportes por defecto una función. Tu nombre de archivo debe ser idéntico al nombre de tu función.\r\n\r\n  ```javascript\r\n  function makeStyleGuide() {\r\n  }\r\n\r\n  export default makeStyleGuide;\r\n  ```\r\n\r\n  - Usa camelCase cuando exportes un objeto constructor / clase / singleton / librería de función / esqueleto.\r\n  ```javascript\r\n  const AirbnbStyleGuide = {\r\n    es6: {\r\n    }\r\n  };\r\n\r\n  export default AirbnbStyleGuide;\r\n  ```\r\n\r\n    **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n\r\n## <a name='accessors'>Funciones de Acceso</a>\r\n\r\n  - Funciones de acceso para las propiedades no son requeridas.\r\n  - No uses getters/setters de JavaScript ya que causan efectos colaterales no esperados y son difíciles de probar, mantener y razonar. En vez de ello, si creas funciones de acceso usa  ```getVal()``` y ```setVal('hello')```.\r\n\r\n  ```javascript\r\n     // Maintainable-JavaScript-Nicholas-C-Zakas\r\n     class Dragon {\r\n       get age() {\r\n         // ...\r\n       }\r\n\r\n       set age(value) {\r\n         // ...\r\n       }\r\n     }\r\n\r\n     // bien\r\n     class Dragon {\r\n       getAge() {\r\n         // ...\r\n       }\r\n\r\n       setAge(value) {\r\n         // ...\r\n       }\r\n     }\r\n     ```\r\n\r\n  - Si la propiedad es un booleano, usa ```isVal()``` o ```hasVal()```.\r\n\r\n    ```javascript\r\n    // mal\r\n    if (!dragon.age()) {\r\n      return false;\r\n    }\r\n\r\n    // bien\r\n    if (!dragon.hasAge()) {\r\n      return false;\r\n    }\r\n    ```\r\n\r\n  - Está bien crear funciones ```get()``` y ```set()```, pero sé consistente.\r\n\r\n    ```javascript\r\n    class Jedi {\r\n      constructor(options = {}) {\r\n        const lightsaber = options.lightsaber || 'blue';\r\n        this.set('lightsaber', lightsaber);\r\n      }\r\n\r\n      set(key, val) {\r\n        this[key] = val;\r\n      }\r\n\r\n      get(key) {\r\n        return this[key];\r\n      }\r\n    }\r\n    ```\r\n\r\n    **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n\r\n## <a name='events'>Eventos</a>\r\n\r\n  - Cuando envíes paquetes de datos a los eventos (ya sea con eventos del DOM o algo propietario como los eventos de Backbone), pasa un mapa en vez de un valor directo. Esto permitirá a un próximo colaborador a agregar más datos al paquete de datos sin que tenga que encontrar o actualizar un handler para cada evento. Por ejemplo, en vez de:\r\n\r\n    ```js\r\n    // mal\r\n    $(this).trigger('listingUpdated', listing.id);\r\n\r\n    ...\r\n\r\n    $(this).on('listingUpdated', (e, listingId) => {\r\n      // hacer algo con listingId\r\n    });\r\n    ```\r\n\r\n    prefiere:\r\n\r\n    ```js\r\n    // bien\r\n    $(this).trigger('listingUpdated', { listingId : listing.id });\r\n\r\n    ...\r\n\r\n    $(this).on('listingUpdated', (e, data) => {\r\n      // hacer algo con data.listingId\r\n    });\r\n    ```\r\n\r\n  **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n## <a name='jquery'>jQuery</a>\r\n\r\n  - Nombre las variables de objetos jQuery con un prefijo `$`.\r\n\r\n    ```javascript\r\n    // mal\r\n    const sidebar = $('.sidebar');\r\n\r\n    // bien\r\n    const $sidebar = $('.sidebar');\r\n    ```\r\n\r\n  - Guarde en variables los lookups de jQuery que se necesiten posteriormente.\r\n\r\n    ```javascript\r\n    // mal\r\n    function setSidebar() {\r\n      $('.sidebar').hide();\r\n\r\n      // ...algo...\r\n\r\n      $('.sidebar').css({\r\n        'background-color': 'pink'\r\n      });\r\n    }\r\n\r\n    // bien\r\n    function setSidebar() {\r\n      const $sidebar = $('.sidebar');\r\n      $sidebar.hide();\r\n\r\n      // ...algo...\r\n\r\n      $sidebar.css({\r\n        'background-color': 'pink'\r\n      });\r\n    }\r\n    ```\r\n\r\n  - Para consultas de elementos DOM usa el modo Cascada `$('.sidebar ul')` o parent > child `$('.sidebar > ul')`. [jsPerf](http://jsperf.com/jquery-find-vs-context-sel/16)\r\n  - Usa `find` solo con consultas guardadas en variables previamente.\r\n\r\n    ```javascript\r\n    // mal\r\n    $('ul', '.sidebar').hide();\r\n\r\n    // mal\r\n    $('.sidebar').find('ul').hide();\r\n\r\n    // bien\r\n    $('.sidebar ul').hide();\r\n\r\n    // bien\r\n    $('.sidebar > ul').hide();\r\n\r\n    // bien\r\n    $sidebar.find('ul');\r\n    ```\r\n\r\n    **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n\r\n## <a name='es5'>Compatibilidad con ECMAScript 5</a>\r\n\r\n  - Revisa la [tabla de compatibilidad](http://kangax.github.com/es5-compat-table/) de ES5 de [Kangax](https://twitter.com/kangax/).\r\n\r\n    **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n## <a name=\"ecmascript-6-styles\"></a>Estilos de ES6+ (ES 2015+)\r\n\r\n    - A continuación, un conjunto de enlaces hacia los estilos para las nuevas características de ES6:\r\n\r\n  1. [Notación Funciones de Flecha](#arrow-functions)\r\n  1. [Clases](#classes--constructors)\r\n  1. [Declaración abreviada para objeto](#es6-object-shorthand)\r\n  1. [Declaración de objeto concisa](#es6-object-concise)\r\n  1. [Propiedades computadas de objeto](#es6-computed-properties)\r\n  1. [Plantillas de texto](#es6-template-literals)\r\n  1. [Destructuring](#destructuring)\r\n  1. [Parámetros por defecto](#es6-default-parameters)\r\n  1. [Rest](#es6-rest)\r\n  1. [Spreads de arreglos](#es6-array-spreads)\r\n  1. [Let y Const](#references)\r\n  1. [Iteradores y Generadores](#iterators-and-generators)\r\n  1. [Módulos](#modules)\r\n\r\n    - No uses [las propuestas de TC39](https://github.com/tc39/proposals) puesto que aún no han llegado a la tercera etapa.\r\n\r\n      > ¿Por qué? [No están finalizadas](https://tc39.github.io/process-document/), y están sujetas a cambios o reescritas completamente. Vamos a usar JavaScript y las propuestas aún no son JavaScript.\r\n\r\n    **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n## <a name='testing'>Pruebas</a>\r\n\r\n  - **Sip**.\r\n\r\n    ```javascript\r\n    function foo() {\r\n      return true;\r\n    }\r\n    ```\r\n\r\n  - **No, but seriously**:\r\n   - Cualquiera que sea el framework de testing que emplees, ¡deberías escribir tests!\r\n   - Esfuérzate por escribir funciones pequeñas y puras, además de minimizar las posibles mutaciones que pudiesen ocurrir.\r\n   - Sé cuidados con los stubs y los mocks - pueden hacer tus tests más frágiles.\r\n   - Usamos principalmente [`mocha`](https://www.npmjs.com/package/mocha) en Airbnb. [`tape`](https://www.npmjs.com/package/tape) es también usado ocasionalmente para módulos pequeños y separados.\r\n   - 100% de cobertura de pruebas es una buena meta a perseguir, a pesar que no es siempre práctico conseguirlo.\r\n   - Cuando corrijas una incidencia (bug), _escribe una prueba de regresión_. Una incidencia sin una prueba de regresión es casi seguro que volverá a ocurrir en el futuro.\r\n\r\n    **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n## <a name='performance'>Desempeño</a>\r\n\r\n  - [On Layout & Web Performance](http://kellegous.com/j/2013/01/26/layout-performance/)\r\n  - [String vs Array Concat](http://jsperf.com/string-vs-array-concat/2)\r\n  - [Try/Catch Cost In a Loop](http://jsperf.com/try-catch-in-loop-cost)\r\n  - [Bang Function](http://jsperf.com/bang-function)\r\n  - [jQuery Find vs Context, Selector](http://jsperf.com/jquery-find-vs-context-sel/13)\r\n  - [innerHTML vs textContent for script text](http://jsperf.com/innerhtml-vs-textcontent-for-script-text)\r\n  - [Long String Concatenation](http://jsperf.com/ya-string-concat)\r\n  - [Are Javascript functions like `map()`, `reduce()`, and `filter()` optimized for traversing arrays?](https://www.quora.com/JavaScript-programming-language-Are-Javascript-functions-like-map-reduce-and-filter-already-optimized-for-traversing-array/answer/Quildreen-Motta)\r\n  - Loading...\r\n\r\n  **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n\r\n## <a name='resources'>Recursos</a>\r\n\r\n**Learning ES6**\r\n\r\n  - [Draft ECMA 2015 (ES6) Spec](https://people.mozilla.org/~jorendorff/es6-draft.html)\r\n  - [ExploringJS](http://exploringjs.com/)\r\n  - [Tabla de compatibilidad de ES6](https://kangax.github.io/compat-table/es6/)\r\n  - [Vistazo comprensivo de las nuevas características de ES6](http://es6-features.org/)\r\n\r\n**Lee esto**\r\n\r\n  - [Standard ECMA-262](http://www.ecma-international.org/ecma-262/6.0/index.html)\r\n\r\n**Tools**\r\n\r\n  Code Style Linters\r\n  - [JSHint](http://www.jshint.com/) - [Airbnb Style .jshintrc](https://github.com/airbnb/javascript/blob/master/linters/.jshintrc)\r\n  - [JSCS](https://github.com/jscs-dev/node-jscs) - [Airbnb Style Preset](https://github.com/jscs-dev/node-jscs/blob/master/presets/airbnb.json)\r\n\r\n**Otras guías de estilo**\r\n\r\n  - [Google JavaScript Style Guide](http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml) (Guía de Estilo de Javascript de Google)\r\n  - [jQuery Core Style Guidelines](http://docs.jquery.com/JQuery_Core_Style_Guidelines) (Lineamientos de Estilo con el núcleo de jQuery)\r\n  - [Principles of Writing Consistent, Idiomatic JavaScript](https://github.com/rwldrn/idiomatic.js/) (Idiomatic Javascript: Principios de Escritura Consistente)\r\n\r\n**Otros estilos**\r\n\r\n  - [Naming this in nested functions](https://gist.github.com/4135065) - Christian Johansen (Nomenclatura en funciones anidadas)\r\n  - [Conditional Callbacks](https://github.com/airbnb/javascript/issues/52) (Callbacks condicionales)\r\n  - [Popular JavaScript Coding Conventions on Github](http://sideeffect.kr/popularconvention/#javascript) (Convenciones Populares de Programación con Javascript en Github)\r\n  - [Multiple var statements in JavaScript, not superfluous](http://benalman.com/news/2012/05/multiple-var-statements-javascript/) - Ben Alman (Múltiples sentencias var en JavaScript, no superfluas)\r\n\r\n**Lecturas más profundas**\r\n\r\n  - [Understanding JavaScript Closures](http://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/) - Angus Croll (Entendiendo los Closures de JavaScript)\r\n  - [Basic JavaScript for the impatient programmer](http://www.2ality.com/2013/06/basic-javascript.html) - Dr. Axel Rauschmayer (JavaScript Básico para el programador impaciente)\r\n  - [You Might Not Need jQuery](http://youmightnotneedjquery.com/) - Zack Bloom & Adam Schwartz (Podrías no necesitar jQuery)\r\n  - [ES6 Features](https://github.com/lukehoban/es6features) - Luke Hoban (Características de ES6)\r\n  - [Frontend Guidelines](https://github.com/bendc/frontend-guidelines) - Benjamin De Cock (Lineamientos para el Frontend)\r\n\r\n**Libros**\r\n\r\n  - [JavaScript: The Good Parts](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742) - Douglas Crockford (JavaScript: Las Buenas Partes)\r\n  - [JavaScript Patterns](http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752) - Stoyan Stefanov (Patrones JavaScript)\r\n  - [Pro JavaScript Design Patterns](http://www.amazon.com/JavaScript-Design-Patterns-Recipes-Problem-Solution/dp/159059908X)  - Ross Harmes and Dustin Diaz (Patrones de Diseño Avanzados en Javascript)\r\n  - [High Performance Web Sites: Essential Knowledge for Front-End Engineers](http://www.amazon.com/High-Performance-Web-Sites-Essential/dp/0596529309) - Steve Souders (Sitios Web de Alto Desempeño: Conocimiento Esencial para los Ingenieros de Capa de Presentación)\r\n  - [Maintainable JavaScript](http://www.amazon.com/Maintainable-JavaScript-Nicholas-C-Zakas/dp/1449327680) - Nicholas C. Zakas (JavaScript Mantenible)\r\n  - [JavaScript Web Applications](http://www.amazon.com/JavaScript-Web-Applications-Alex-MacCaw/dp/144930351X) - Alex MacCaw (Aplicaciones Web JavaScript)\r\n  - [Pro JavaScript Techniques](http://www.amazon.com/Pro-JavaScript-Techniques-John-Resig/dp/1590597273) - John Resig (Técnicas Avanzadas JavaScript)\r\n  - [Smashing Node.js: JavaScript Everywhere](http://www.amazon.com/Smashing-Node-js-JavaScript-Everywhere-Magazine/dp/1119962595) - Guillermo Rauch (Increíble Node.js: JavaScript en todas partes)\r\n  - [Secrets of the JavaScript Ninja](http://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X) - John Resig and Bear Bibeault (Secretos del JavaScript Ninja)\r\n  - [Human JavaScript](http://humanjavascript.com/) - Henrik Joreteg (JavaScript Humano)\r\n  - [Superhero.js](http://superherojs.com/) - Kim Joar Bekkelund, Mads Mobæk, & Olav Bjorkoy (Superhéroe.js)\r\n  - [JSBooks](http://jsbooks.revolunet.com/) - Julien Bouquillon\r\n  - [Third Party JavaScript](http://manning.com/vinegar/) - Ben Vinegar and Anton Kovalyov (JavaScript de Terceros)\r\n  - [Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript](http://amzn.com/0321812182) - David Herman (JavaScript Efectivo: 68 modos específicos para elevar el poder de JavaScript)\r\n  - [Eloquent JavaScript](http://eloquentjavascript.net/) - Marijn Haverbeke (JavaScript Elocuente)\r\n  - [You Don't Know JS: ES6 & Beyond](http://shop.oreilly.com/product/0636920033769.do) - Kyle Simpson (No sabes JS: ES6 y más allá)\r\n\r\n**Blogs**\r\n\r\n  - [DailyJS](http://dailyjs.com/)\r\n  - [JavaScript Weekly](http://javascriptweekly.com/)\r\n  - [JavaScript, JavaScript...](http://javascriptweblog.wordpress.com/)\r\n  - [Bocoup Weblog](http://weblog.bocoup.com/)\r\n  - [Adequately Good](http://www.adequatelygood.com/)\r\n  - [NCZOnline](http://www.nczonline.net/)\r\n  - [Perfection Kills](http://perfectionkills.com/)\r\n  - [Ben Alman](http://benalman.com/)\r\n  - [Dmitry Baranovskiy](http://dmitry.baranovskiy.com/)\r\n  - [Dustin Diaz](http://dustindiaz.com/)\r\n  - [nettuts](http://net.tutsplus.com/?s=javascript)\r\n\r\n**Podcasts**\r\n\r\n  - [JavaScript Air](https://javascriptair.com/)\r\n  - [JavaScript Jabber](http://devchat.tv/js-jabber/)\r\n\r\n  **[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n## <a name='in-the-wild'>En la cancha</a>\r\n\r\n  Esta es una lista de las organizaciones que están usando esta guía de estilo. Envíanos un pull request o abre un issue y te agregaremos a la lista.\r\n\r\n  - **Airbnb**: [airbnb/javascript](https://github.com/airbnb/javascript)\r\n  - **Aan Zee**: [AanZee/javascript](https://github.com/AanZee/javascript)\r\n  - **American Insitutes for Research**: [AIRAST/javascript](https://github.com/AIRAST/javascript)\r\n  - **Compass Learning**: [compasslearning/javascript-style-guide](https://github.com/compasslearning/javascript-style-guide)\r\n  - **DailyMotion**: [dailymotion/javascript](https://github.com/dailymotion/javascript)\r\n  - **Evernote**: [evernote/javascript-style-guide](https://github.com/evernote/javascript-style-guide)\r\n  - **ExactTarget**: [ExactTarget/javascript](https://github.com/ExactTarget/javascript)\r\n  - **Gawker Media**: [gawkermedia/javascript](https://github.com/gawkermedia/javascript)\r\n  - **GeneralElectric**: [GeneralElectric/javascript](https://github.com/GeneralElectric/javascript)\r\n  - **GoodData**: [gooddata/gdc-js-style](https://github.com/gooddata/gdc-js-style)\r\n  - **Grooveshark**: [grooveshark/javascript](https://github.com/grooveshark/javascript)\r\n  - **How About We**: [howaboutwe/javascript](https://github.com/howaboutwe/javascript)\r\n  - **Mighty Spring**: [mightyspring/javascript](https://github.com/mightyspring/javascript)\r\n  - **MinnPost**: [MinnPost/javascript](https://github.com/MinnPost/javascript)\r\n  - **ModCloth**: [modcloth/javascript](https://github.com/modcloth/javascript)\r\n  - **National Geographic**: [natgeo/javascript](https://github.com/natgeo/javascript)\r\n  - **National Park Service**: [nationalparkservice/javascript](https://github.com/nationalparkservice/javascript)\r\n  - **reddit**: [reddit/styleguide/javascript](https://github.com/reddit/styleguide/tree/master/javascript)\r\n  - **REI**: [reidev/js-style-guide](https://github.com/reidev/js-style-guide)\r\n  - **Razorfish**: [razorfish/javascript-style-guide](https://github.com/razorfish/javascript-style-guide)\r\n  - **Shutterfly**: [shutterfly/javascript](https://github.com/shutterfly/javascript)\r\n  - **Userify**: [userify/javascript](https://github.com/userify/javascript)\r\n  - **Zillow**: [zillow/javascript](https://github.com/zillow/javascript)\r\n  - **ZocDoc**: [ZocDoc/javascript](https://github.com/ZocDoc/javascript)\r\n\r\n## <a name='translation'>Traducciones</a>\r\n\r\n  Esta guía de estilo es también disponible en otros lenguajes:\r\n\r\n  - ![us](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/United-States.png) **Inglés (original)**: [airbnb/javascript](https://github.com/airbnb/javascript)\r\n  - ![br](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Brazil.png) **Portugués Brasileño**: [armoucar/javascript-style-guide](https://github.com/armoucar/javascript-style-guide)\r\n  - ![bg](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Bulgaria.png) **Búlgaro**: [borislavvv/javascript](https://github.com/borislavvv/javascript)\r\n  - ![ca](https://raw.githubusercontent.com/fpmweb/javascript-style-guide/master/img/catala.png) **Catalán**: [fpmweb/javascript-style-guide](https://github.com/fpmweb/javascript-style-guide)\r\n  - ![tw](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Taiwan.png) **Chino (Tradicional)**: [jigsawye/javascript](https://github.com/jigsawye/javascript)\r\n  - ![cn](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/China.png) **Chino (Simplificado)**: [sivan/javascript-style-guide](https://github.com/sivan/javascript-style-guide)\r\n  - ![fr](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/France.png) **Francés**: [nmussy/javascript-style-guide](https://github.com/nmussy/javascript-style-guide)\r\n  - ![de](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Germany.png) **Alemán**: [timofurrer/javascript-style-guide](https://github.com/timofurrer/javascript-style-guide)\r\n  - ![it](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Italy.png) **Italiano**: [sinkswim/javascript-style-guide](https://github.com/sinkswim/javascript-style-guide)\r\n  - ![jp](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Japan.png) **Japonés**: [mitsuruog/javacript-style-guide](https://github.com/mitsuruog/javacript-style-guide)\r\n  - ![kr](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/South-Korea.png) **Coreano**: [tipjs/javascript-style-guide](https://github.com/tipjs/javascript-style-guide)\r\n  - ![pl](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Poland.png) **Polaco**: [mjurczyk/javascript](https://github.com/mjurczyk/javascript)\r\n  - ![ru](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Russia.png) **Ruso**: [uprock/javascript](https://github.com/uprock/javascript)\r\n  - ![th](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Thailand.png) **Tailandés**: [lvarayut/javascript-style-guide](https://github.com/lvarayut/javascript-style-guide)\r\n  - ![vn](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Vietnam.png) **Vietnamita**: [giangpii/javascript-style-guide](https://github.com/giangpii/javascript-style-guide)\r\n\r\n## <a name='guide-guide'>La guía de la Guía de Estilos de Javascript</a>\r\n\r\n  - [Referencia](https://github.com/airbnb/javascript/wiki/The-JavaScript-Style-Guide-Guide)\r\n\r\n## <a name='chat-with-us-about-javascript'>Charla con nosotros sobre Javascript</a>\r\n  - Encuéntranos en [gitter](https://gitter.im/airbnb/javascript).\r\n\r\n## <a name='authors'>Colaboradores</a>\r\n\r\n  - [Vea a los colaboradores](https://github.com/airbnb/javascript/graphs/contributors)\r\n\r\n\r\n## <a name='license'>Licencia</a>\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2014-2016 Airbnb\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n**[[⬆ regresar a la Tabla de Contenido]](#TOC)**\r\n\r\n## Enmiendas\r\n\r\nTe recomendamos hacer fork de esta guía y cambiar las reglas para que se adecúen a la guía de estilos de tu equipo. Abajo podrás encontrar algunas enmiendas a la guía de estilos. Esto te permitirá actualizar periódicamente tu guía de estilos sin tener que lidiar con conflictos al hacer merge.\r\n\r\n# };\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}